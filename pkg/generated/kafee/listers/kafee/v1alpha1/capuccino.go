/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/sample-apiserver/pkg/apis/kafee/v1alpha1"
)

// CapuccinoLister helps list Capuccinos.
// All objects returned here must be treated as read-only.
type CapuccinoLister interface {
	// List lists all Capuccinos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Capuccino, err error)
	// Get retrieves the Capuccino from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Capuccino, error)
	CapuccinoListerExpansion
}

// capuccinoLister implements the CapuccinoLister interface.
type capuccinoLister struct {
	indexer cache.Indexer
}

// NewCapuccinoLister returns a new CapuccinoLister.
func NewCapuccinoLister(indexer cache.Indexer) CapuccinoLister {
	return &capuccinoLister{indexer: indexer}
}

// List lists all Capuccinos in the indexer.
func (s *capuccinoLister) List(selector labels.Selector) (ret []*v1alpha1.Capuccino, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Capuccino))
	})
	return ret, err
}

// Get retrieves the Capuccino from the index for a given name.
func (s *capuccinoLister) Get(name string) (*v1alpha1.Capuccino, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("capuccino"), name)
	}
	return obj.(*v1alpha1.Capuccino), nil
}
